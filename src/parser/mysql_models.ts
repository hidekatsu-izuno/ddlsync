import { TokenType, Token, Statement, TableConstraint, ColumnConstraint, IExpression, Idnetifier, NumberValue } from "../parser"
import semver from "semver"

const ReservedMap = new Map<string, Reserved>()
export class Reserved extends TokenType {
  static ACCESSIBLE = new Reserved("ACCESSIBLE")
  static ADD = new Reserved("ADD")
  static ALL = new Reserved("ALL")
  static ALTER = new Reserved("ALTER")
  static ANALYSE = new Reserved("ANALYSE", { version: "<8.0.0"} )
  static ANALYZE = new Reserved("ANALYZE")
  static AND = new Reserved("AND")
  static AS = new Reserved("AS")
  static ASC = new Reserved("ASC")
  static ASENSITIVE = new Reserved("ASENSITIVE")
  static BEFORE = new Reserved("BEFORE")
  static BETWEEN = new Reserved("BETWEEN")
  static BIGINT = new Reserved("BIGINT")
  static BINARY = new Reserved("BINARY")
  static BLOB = new Reserved("BLOB")
  static BOTH = new Reserved("BOTH")
  static BY = new Reserved("BY")
  static CALL = new Reserved("CALL")
  static CASCADE = new Reserved("CASCADE")
  static CASE = new Reserved("CASE")
  static CHANGE = new Reserved("CHANGE")
  static CHAR = new Reserved("CHAR")
  static CHARACTER = new Reserved("CHARACTER")
  static CHECK = new Reserved("CHECK")
  static COLLATE = new Reserved("COLLATE")
  static COLUMN = new Reserved("COLUMN")
  static CONDITION = new Reserved("CONDITION")
  static CONSTRAINT = new Reserved("CONSTRAINT")
  static CONTINUE = new Reserved("CONTINUE")
  static CONVERT = new Reserved("CONVERT")
  static CREATE = new Reserved("CREATE")
  static CROSS = new Reserved("CROSS")
  static CUBE = new Reserved("CUBE", { version: ">=8.0.1" })
  static CUME_DIST = new Reserved("CUME_DIST", { version: ">=8.0.2" })
  static CURRENT_DATE = new Reserved("CURRENT_DATE")
  static CURRENT_TIME = new Reserved("CURRENT_TIME")
  static CURRENT_TIMESTAMP = new Reserved("CURRENT_TIMESTAMP")
  static CURRENT_USER = new Reserved("CURRENT_USER")
  static CURSOR = new Reserved("CURSOR")
  static DATABASE = new Reserved("DATABASE")
  static DATABASES = new Reserved("DATABASES")
  static DAY_HOUR = new Reserved("DAY_HOUR")
  static DAY_MICROSECOND = new Reserved("DAY_MICROSECOND")
  static DAY_MINUTE = new Reserved("DAY_MINUTE")
  static DAY_SECOND = new Reserved("DAY_SECOND")
  static DEC = new Reserved("DEC")
  static DECIMAL = new Reserved("DECIMAL")
  static DECLARE = new Reserved("DECLARE")
  static DEFAULT = new Reserved("DEFAULT")
  static DELAYED = new Reserved("DELAYED")
  static DELETE = new Reserved("DELETE")
  static DENSE_RANK = new Reserved("DENSE_RANK", { version: ">=8.0.2" })
  static DESC = new Reserved("DESC")
  static DESCRIBE = new Reserved("DESCRIBE")
  static DES_KEY_FILE = new Reserved("DES_KEY_FILE", { version: "<8.0.0" })
  static DETERMINISTIC = new Reserved("DETERMINISTIC")
  static DISTINCT = new Reserved("DISTINCT")
  static DISTINCTROW = new Reserved("DISTINCTROW")
  static DIV = new Reserved("DIV")
  static DOUBLE = new Reserved("DOUBLE")
  static DROP = new Reserved("DROP")
  static DUAL = new Reserved("DUAL")
  static EACH = new Reserved("EACH")
  static ELSE = new Reserved("ELSE")
  static ELSEIF = new Reserved("ELSEIF")
  static EMPTY = new Reserved("EMPTY", { version: ">=8.0.4" })
  static ENCLOSED = new Reserved("ENCLOSED")
  static ESCAPED = new Reserved("ESCAPED")
  static EXCEPT = new Reserved("EXCEPT")
  static EXISTS = new Reserved("EXISTS")
  static EXIT = new Reserved("EXIT")
  static EXPLAIN = new Reserved("EXPLAIN")
  static FALSE = new Reserved("FALSE")
  static FETCH = new Reserved("FETCH")
  static FIRST_VALUE = new Reserved("FIRST_VALUE", { version: ">=8.0.2" })
  static FLOAT = new Reserved("FLOAT")
  static FOR = new Reserved("FOR")
  static FORCE = new Reserved("FORCE")
  static FOREIGN = new Reserved("FOREIGN")
  static FROM = new Reserved("FROM")
  static FULLTEXT = new Reserved("FULLTEXT")
  static FUNCTION = new Reserved("FUNCTION", { version: ">=8.0.1" })
  static GENERATED = new Reserved("GENERATED")
  static GET = new Reserved("GET")
  static GRANT = new Reserved("GRANT")
  static GROUP = new Reserved("GROUP")
  static GROUPING = new Reserved("GROUPING", { version: ">=8.0.1" })
  static GROUPS = new Reserved("GROUPS", { version: ">=8.0.2" })
  static HAVING = new Reserved("HAVING")
  static HIGH_PRIORITY = new Reserved("HIGH_PRIORITY")
  static HOUR_MICROSECOND = new Reserved("HOUR_MICROSECOND")
  static HOUR_MINUTE = new Reserved("HOUR_MINUTE")
  static HOUR_SECOND = new Reserved("HOUR_SECOND")
  static IF = new Reserved("IF")
  static IGNORE = new Reserved("IGNORE")
  static IN = new Reserved("IN")
  static INDEX = new Reserved("INDEX")
  static INFILE = new Reserved("INFILE")
  static INNER = new Reserved("INNER")
  static INOUT = new Reserved("INOUT")
  static INSENSITIVE = new Reserved("INSENSITIVE")
  static INSERT = new Reserved("INSERT")
  static INT = new Reserved("INT")
  static INTEGER = new Reserved("INTEGER")
  static INTERVAL = new Reserved("INTERVAL")
  static INTO = new Reserved("INTO")
  static IO_AFTER_GTIDS = new Reserved("IO_AFTER_GTIDS")
  static IO_BEFORE_GTIDS = new Reserved("IO_BEFORE_GTIDS")
  static IS = new Reserved("IS")
  static ITERATE = new Reserved("ITERATE")
  static JOIN = new Reserved("JOIN")
  static JSON_TABLE = new Reserved("JSON_TABLE", { version: ">=8.0.4" })
  static KEY = new Reserved("KEY")
  static KEYS = new Reserved("KEYS")
  static KILL = new Reserved("KILL")
  static LAG = new Reserved("LAG", { version: ">=8.0.2" })
  static LAST_VALUE = new Reserved("LAST_VALUE", { version: ">=8.0.2" })
  static LATERAL = new Reserved("LATERAL", { version: ">=8.0.14" })
  static LEAD = new Reserved("LEAD", { version: ">=8.0.2" })
  static LEADING = new Reserved("LEADING")
  static LEAVE = new Reserved("LEAVE")
  static LEFT = new Reserved("LEFT")
  static LIKE = new Reserved("LIKE")
  static LIMIT = new Reserved("LIMIT")
  static LINEAR = new Reserved("LINEAR")
  static LINES = new Reserved("LINES")
  static LOAD = new Reserved("LOAD")
  static LOCALTIME = new Reserved("LOCALTIME")
  static LOCALTIMESTAMP = new Reserved("LOCALTIMESTAMP")
  static LOCK = new Reserved("LOCK")
  static LONG = new Reserved("LONG")
  static LONGBLOB = new Reserved("LONGBLOB")
  static LONGTEXT = new Reserved("LONGTEXT")
  static LOOP = new Reserved("LOOP")
  static LOW_PRIORITY = new Reserved("LOW_PRIORITY")
  static MASTER_BIND = new Reserved("MASTER_BIND")
  static MASTER_SERVER_ID = new Reserved("MASTER_SERVER_ID", { version: "<8.0.0" })
  static MASTER_SSL_VERIFY_SERVER_CERT = new Reserved("MASTER_SSL_VERIFY_SERVER_CERT")
  static MATCH = new Reserved("MATCH")
  static MAXVALUE = new Reserved("MAXVALUE")
  static MEDIUMBLOB = new Reserved("MEDIUMBLOB")
  static MEDIUMINT = new Reserved("MEDIUMINT")
  static MEDIUMTEXT = new Reserved("MEDIUMTEXT")
  static MIDDLEINT = new Reserved("MIDDLEINT")
  static MINUTE_MICROSECOND = new Reserved("MINUTE_MICROSECOND")
  static MINUTE_SECOND = new Reserved("MINUTE_SECOND")
  static MOD = new Reserved("MOD")
  static MODIFIES = new Reserved("MODIFIES")
  static NATURAL = new Reserved("NATURAL")
  static NOT = new Reserved("NOT")
  static NO_WRITE_TO_BINLOG = new Reserved("NO_WRITE_TO_BINLOG")
  static NTH_VALUE = new Reserved("NTH_VALUE", { version: ">=8.0.2" })
  static NTILE = new Reserved("NTILE", { version: ">=8.0.2" })
  static NULL = new Reserved("NULL")
  static NUMERIC = new Reserved("NUMERIC")
  static OF = new Reserved("OF", { version: ">=8.0.1" })
  static ON = new Reserved("ON")
  static OPTIMIZE = new Reserved("OPTIMIZE")
  static OPTIMIZER_COSTS = new Reserved("OPTIMIZER_COSTS")
  static OPTION = new Reserved("OPTION")
  static OPTIONALLY = new Reserved("OPTIONALLY")
  static OR = new Reserved("OR")
  static ORDER = new Reserved("ORDER")
  static OUT = new Reserved("OUT")
  static OUTER = new Reserved("OUTER")
  static OUTFILE = new Reserved("OUTFILE")
  static OVER = new Reserved("OVER", { version: ">=8.0.2" })
  static PARSE_GCOL_EXPR = new Reserved("PARSE_GCOL_EXPR", { version: "<8.0.0" })
  static PARTITION = new Reserved("PARTITION")
  static PERCENT_RANK = new Reserved("PERCENT_RANK", { version: ">=8.0.2" })
  static PRECISION = new Reserved("PRECISION")
  static PRIMARY = new Reserved("PRIMARY")
  static PROCEDURE = new Reserved("PROCEDURE")
  static PURGE = new Reserved("PURGE")
  static RANGE = new Reserved("RANGE")
  static RANK = new Reserved("RANK", { version: ">=8.0.2" })
  static READ = new Reserved("READ")
  static READS = new Reserved("READS")
  static READ_WRITE = new Reserved("READ_WRITE")
  static REAL = new Reserved("REAL")
  static RECURSIVE = new Reserved("RECURSIVE", { version: ">=8.0.1" })
  static REDOFILE = new Reserved("REDOFILE", { version: "<8.0.0" })
  static REFERENCES = new Reserved("REFERENCES")
  static REGEXP = new Reserved("REGEXP")
  static RELEASE = new Reserved("RELEASE")
  static RENAME = new Reserved("RENAME")
  static REPEAT = new Reserved("REPEAT")
  static REPLACE = new Reserved("REPLACE")
  static REQUIRE = new Reserved("REQUIRE")
  static RESIGNAL = new Reserved("RESIGNAL")
  static RESTRICT = new Reserved("RESTRICT")
  static RETURN = new Reserved("RETURN")
  static REVOKE = new Reserved("REVOKE")
  static RIGHT = new Reserved("RIGHT")
  static RLIKE = new Reserved("RLIKE")
  static ROW = new Reserved("ROW", { version: ">=8.0.2" })
  static ROWS = new Reserved("ROWS", { version: ">=8.0.2" })
  static ROW_NUMBER = new Reserved("ROW_NUMBER", { version: ">=8.0.2" })
  static SCHEMA = new Reserved("SCHEMA")
  static SCHEMAS = new Reserved("SCHEMAS")
  static SECOND_MICROSECOND = new Reserved("SECOND_MICROSECOND")
  static SELECT = new Reserved("SELECT")
  static SENSITIVE = new Reserved("SENSITIVE")
  static SEPARATOR = new Reserved("SEPARATOR")
  static SET = new Reserved("SET")
  static SHOW = new Reserved("SHOW")
  static SIGNAL = new Reserved("SIGNAL")
  static SMALLINT = new Reserved("SMALLINT")
  static SPATIAL = new Reserved("SPATIAL")
  static SPECIFIC = new Reserved("SPECIFIC")
  static SQL = new Reserved("SQL")
  static SQLEXCEPTION = new Reserved("SQLEXCEPTION")
  static SQLSTATE = new Reserved("SQLSTATE")
  static SQLWARNING = new Reserved("SQLWARNING")
  static SQL_BIG_RESULT = new Reserved("SQL_BIG_RESULT")
  static SQL_CACHE = new Reserved("SQL_CACHE", { version: "<8.0.0" })
  static SQL_CALC_FOUND_ROWS = new Reserved("SQL_CALC_FOUND_ROWS")
  static SQL_SMALL_RESULT = new Reserved("SQL_SMALL_RESULT")
  static SSL = new Reserved("SSL")
  static STARTING = new Reserved("STARTING")
  static STORED = new Reserved("STORED")
  static STRAIGHT_JOIN = new Reserved("STRAIGHT_JOIN")
  static SYSTEM = new Reserved("SYSTEM", { version: ">=8.0.3" })
  static TABLE = new Reserved("TABLE")
  static TERMINATED = new Reserved("TERMINATED")
  static THEN = new Reserved("THEN")
  static TINYBLOB = new Reserved("TINYBLOB")
  static TINYINT = new Reserved("TINYINT")
  static TINYTEXT = new Reserved("TINYTEXT")
  static TO = new Reserved("TO")
  static TRAILING = new Reserved("TRAILING")
  static TRIGGER = new Reserved("TRIGGER")
  static TRUE = new Reserved("TRUE")
  static UNDO = new Reserved("UNDO")
  static UNION = new Reserved("UNION")
  static UNIQUE = new Reserved("UNIQUE")
  static UNLOCK = new Reserved("UNLOCK")
  static UNSIGNED = new Reserved("UNSIGNED")
  static UPDATE = new Reserved("UPDATE")
  static USAGE = new Reserved("USAGE")
  static USE = new Reserved("USE")
  static USING = new Reserved("USING")
  static UTC_DATE = new Reserved("UTC_DATE")
  static UTC_TIME = new Reserved("UTC_TIME")
  static UTC_TIMESTAMP = new Reserved("UTC_TIMESTAMP")
  static VALUES = new Reserved("VALUES")
  static VARBINARY = new Reserved("VARBINARY")
  static VARCHAR = new Reserved("VARCHAR")
  static VARCHARACTER = new Reserved("VARCHARACTER")
  static VARYING = new Reserved("VARYING")
  static VIRTUAL = new Reserved("VIRTUAL")
  static WHEN = new Reserved("WHEN")
  static WHERE = new Reserved("WHERE")
  static WHILE = new Reserved("WHILE")
  static WINDOW = new Reserved("WINDOW", { version: ">=8.0.2" })
  static WITH = new Reserved("WITH")
  static WRITE = new Reserved("WRITE")
  static XOR = new Reserved("XOR")
  static YEAR_MONTH = new Reserved("YEAR_MONTH")
  static ZEROFILL = new Reserved("ZEROFILL")

  constructor(
    name: string,
    options: { [key: string]: any } = {}
  ) {
    super(name, options)
    ReservedMap.set(name, this)
  }

  static toMap(version: string) {
    if (!version) {
      return ReservedMap
    }

    const newMap = new Map<string, Reserved>()
    ReservedMap.forEach((value, key) => {
      if (!value.options.version || semver.satisfies(version, value.options.version)) {
        newMap.set(key, value)
      }
    })
    return newMap
  }
}
