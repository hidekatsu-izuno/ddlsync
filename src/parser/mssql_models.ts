import { TokenType, Token, Statement, TableConstraint, ColumnConstraint, IExpression, Idnetifier, NumberValue } from "./common"
import semver from "semver"

const ReservedMap = new Map<string, Reserved>()
export class Reserved extends TokenType {
  static ADD = new Reserved("ADD")
  static ALL = new Reserved("ALL")
  static ALTER = new Reserved("ALTER")
  static AND = new Reserved("AND")
  static ANY = new Reserved("ANY")
  static AS = new Reserved("AS")
  static ASC = new Reserved("ASC")
  static AUTHORIZATION = new Reserved("AUTHORIZATION")
  static BACKUP = new Reserved("BACKUP")
  static BEGIN = new Reserved("BEGIN")
  static BETWEEN = new Reserved("BETWEEN")
  static BREAK = new Reserved("BREAK")
  static BROWSE = new Reserved("BROWSE")
  static BULK = new Reserved("BULK")
  static BY = new Reserved("BY")
  static CASCADE = new Reserved("CASCADE")
  static CASE = new Reserved("CASE")
  static CHECK = new Reserved("CHECK")
  static CHECKPOINT = new Reserved("CHECKPOINT")
  static CLOSE = new Reserved("CLOSE")
  static CLUSTERED = new Reserved("CLUSTERED")
  static COALESCE = new Reserved("COALESCE")
  static COLLATE = new Reserved("COLLATE")
  static COLUMN = new Reserved("COLUMN")
  static COMMIT = new Reserved("COMMIT")
  static COMPUTE = new Reserved("COMPUTE")
  static CONSTRAINT = new Reserved("CONSTRAINT")
  static CONTAINS = new Reserved("CONTAINS")
  static CONTAINSTABLE = new Reserved("CONTAINSTABLE")
  static CONTINUE = new Reserved("CONTINUE")
  static CONVERT = new Reserved("CONVERT")
  static CREATE = new Reserved("CREATE")
  static CROSS = new Reserved("CROSS")
  static CURRENT = new Reserved("CURRENT")
  static CURRENT_DATE = new Reserved("CURRENT_DATE")
  static CURRENT_TIME = new Reserved("CURRENT_TIME")
  static CURRENT_TIMESTAMP = new Reserved("CURRENT_TIMESTAMP")
  static CURRENT_USER = new Reserved("CURRENT_USER")
  static CURSOR = new Reserved("CURSOR")
  static DATABASE = new Reserved("DATABASE")
  static DBCC = new Reserved("DBCC")
  static DEALLOCATE = new Reserved("DEALLOCATE")
  static DECLARE = new Reserved("DECLARE")
  static DEFAULT = new Reserved("DEFAULT")
  static DELETE = new Reserved("DELETE")
  static DENY = new Reserved("DENY")
  static DESC = new Reserved("DESC")
  static DISK = new Reserved("DISK")
  static DISTINCT = new Reserved("DISTINCT")
  static DISTRIBUTED = new Reserved("DISTRIBUTED")
  static DOUBLE = new Reserved("DOUBLE")
  static DROP = new Reserved("DROP")
  static DUMP = new Reserved("DUMP")
  static ELSE = new Reserved("ELSE")
  static END = new Reserved("END")
  static ERRLVL = new Reserved("ERRLVL")
  static ESCAPE = new Reserved("ESCAPE")
  static EXCEPT = new Reserved("EXCEPT")
  static EXEC = new Reserved("EXEC")
  static EXECUTE = new Reserved("EXECUTE")
  static EXISTS = new Reserved("EXISTS")
  static EXIT = new Reserved("EXIT")
  static EXTERNAL = new Reserved("EXTERNAL")
  static FETCH = new Reserved("FETCH")
  static FILE = new Reserved("FILE")
  static FILLFACTOR = new Reserved("FILLFACTOR")
  static FOR = new Reserved("FOR")
  static FOREIGN = new Reserved("FOREIGN")
  static FREETEXT = new Reserved("FREETEXT")
  static FREETEXTTABLE = new Reserved("FREETEXTTABLE")
  static FROM = new Reserved("FROM")
  static FULL = new Reserved("FULL")
  static FUNCTION = new Reserved("FUNCTION")
  static GOTO = new Reserved("GOTO")
  static GRANT = new Reserved("GRANT")
  static GROUP = new Reserved("GROUP")
  static HAVING = new Reserved("HAVING")
  static HOLDLOCK = new Reserved("HOLDLOCK")
  static IDENTITY = new Reserved("IDENTITY")
  static IDENTITYCOL = new Reserved("IDENTITYCOL")
  static IDENTITY_INSERT = new Reserved("IDENTITY_INSERT")
  static IF = new Reserved("IF")
  static IN = new Reserved("IN")
  static INDEX = new Reserved("INDEX")
  static INNER = new Reserved("INNER")
  static INSERT = new Reserved("INSERT")
  static INTERSECT = new Reserved("INTERSECT")
  static INTO = new Reserved("INTO")
  static IS = new Reserved("IS")
  static JOIN = new Reserved("JOIN")
  static KEY = new Reserved("KEY")
  static KILL = new Reserved("KILL")
  static LEFT = new Reserved("LEFT")
  static LIKE = new Reserved("LIKE")
  static LINENO = new Reserved("LINENO")
  static LOAD = new Reserved("LOAD")
  static MERGE = new Reserved("MERGE")
  static NATIONAL = new Reserved("NATIONAL")
  static NOCHECK = new Reserved("NOCHECK")
  static NONCLUSTERED = new Reserved("NONCLUSTERED")
  static NOT = new Reserved("NOT")
  static NULL = new Reserved("NULL")
  static NULLIF = new Reserved("NULLIF")
  static OF = new Reserved("OF")
  static OFF = new Reserved("OFF")
  static OFFSETS = new Reserved("OFFSETS")
  static ON = new Reserved("ON")
  static OPEN = new Reserved("OPEN")
  static OPENDATASOURCE = new Reserved("OPENDATASOURCE")
  static OPENQUERY = new Reserved("OPENQUERY")
  static OPENROWSET = new Reserved("OPENROWSET")
  static OPENXML = new Reserved("OPENXML")
  static OPTION = new Reserved("OPTION")
  static OR = new Reserved("OR")
  static ORDER = new Reserved("ORDER")
  static OUTER = new Reserved("OUTER")
  static OVER = new Reserved("OVER")
  static PERCENT = new Reserved("PERCENT")
  static PIVOT = new Reserved("PIVOT")
  static PLAN = new Reserved("PLAN")
  static PRECISION = new Reserved("PRECISION")
  static PRIMARY = new Reserved("PRIMARY")
  static PRINT = new Reserved("PRINT")
  static PROC = new Reserved("PROC")
  static PROCEDURE = new Reserved("PROCEDURE")
  static PUBLIC = new Reserved("PUBLIC")
  static RAISERROR = new Reserved("RAISERROR")
  static READ = new Reserved("READ")
  static READTEXT = new Reserved("READTEXT")
  static RECONFIGURE = new Reserved("RECONFIGURE")
  static REFERENCES = new Reserved("REFERENCES")
  static REPLICATION = new Reserved("REPLICATION")
  static RESTORE = new Reserved("RESTORE")
  static RESTRICT = new Reserved("RESTRICT")
  static RETURN = new Reserved("RETURN")
  static REVERT = new Reserved("REVERT")
  static REVOKE = new Reserved("REVOKE")
  static RIGHT = new Reserved("RIGHT")
  static ROLLBACK = new Reserved("ROLLBACK")
  static ROWCOUNT = new Reserved("ROWCOUNT")
  static ROWGUIDCOL = new Reserved("ROWGUIDCOL")
  static RULE = new Reserved("RULE")
  static SAVE = new Reserved("SAVE")
  static SCHEMA = new Reserved("SCHEMA")
  static SECURITYAUDIT = new Reserved("SECURITYAUDIT")
  static SELECT = new Reserved("SELECT")
  static SEMANTICKEYPHRASETABLE = new Reserved("SEMANTICKEYPHRASETABLE")
  static SEMANTICSIMILARITYDETAILSTABLE = new Reserved("SEMANTICSIMILARITYDETAILSTABLE")
  static SEMANTICSIMILARITYTABLE = new Reserved("SEMANTICSIMILARITYTABLE")
  static SESSION_USER = new Reserved("SESSION_USER")
  static SET = new Reserved("SET")
  static SETUSER = new Reserved("SETUSER")
  static SHUTDOWN = new Reserved("SHUTDOWN")
  static SOME = new Reserved("SOME")
  static STATISTICS = new Reserved("STATISTICS")
  static SYSTEM_USER = new Reserved("SYSTEM_USER")
  static TABLE = new Reserved("TABLE")
  static TABLESAMPLE = new Reserved("TABLESAMPLE")
  static TEXTSIZE = new Reserved("TEXTSIZE")
  static THEN = new Reserved("THEN")
  static TO = new Reserved("TO")
  static TOP = new Reserved("TOP")
  static TRAN = new Reserved("TRAN")
  static TRANSACTION = new Reserved("TRANSACTION")
  static TRIGGER = new Reserved("TRIGGER")
  static TRUNCATE = new Reserved("TRUNCATE")
  static TRY_CONVERT = new Reserved("TRY_CONVERT")
  static TSEQUAL = new Reserved("TSEQUAL")
  static UNION = new Reserved("UNION")
  static UNIQUE = new Reserved("UNIQUE")
  static UNPIVOT = new Reserved("UNPIVOT")
  static UPDATE = new Reserved("UPDATE")
  static UPDATETEXT = new Reserved("UPDATETEXT")
  static USE = new Reserved("USE")
  static USER = new Reserved("USER")
  static VALUES = new Reserved("VALUES")
  static VARYING = new Reserved("VARYING")
  static VIEW = new Reserved("VIEW")
  static WAITFOR = new Reserved("WAITFOR")
  static WHEN = new Reserved("WHEN")
  static WHERE = new Reserved("WHERE")
  static WHILE = new Reserved("WHILE")
  static WITH = new Reserved("WITH")
  static WITHIN = new Reserved("WITHIN")
  static WRITETEXT = new Reserved("WRITETEXT")

  constructor(
    name: string,
    options: { [key: string]: any } = {}
  ) {
    super(name, options)
    ReservedMap.set(name, this)
  }

  static toMap(version: string) {
    if (!version) {
      return ReservedMap
    }

    const newMap = new Map<string, Reserved>()
    ReservedMap.forEach((value, key) => {
      if (!value.options.version || semver.satisfies(version, value.options.version)) {
        newMap.set(key, value)
      }
    })
    return newMap
  }
}
